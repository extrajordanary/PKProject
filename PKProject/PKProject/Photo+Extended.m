//
//  Photo+Extended.m
//  PKProject
//
//  Created by Jordan on 10/15/14.
//  Copyright (c) 2014 Byjor. All rights reserved.
//

#import "Photo+Extended.h"
#import "Spot+Extended.h"
#import "User+Extended.h"
#import "ServerObject+Extended.h"
#import "ServerHandler.h"

static NSString* const kAWSBase = @"https://s3-us-west-1.amazonaws.com/cvalt-photos/";

@implementation Photo (Extended)

-(void)updateFromDictionary:(NSDictionary*)dictionary{
    if (self) {
        self.databaseId = dictionary[@"_id"];
        self.creationTimestamp = dictionary[@"creationTimestamp"];
        self.latitude = dictionary[@"latitude"];
        self.longitude = dictionary[@"longitude"];
        self.localPath = dictionary[@"localPath"]; // check if the new one is NA before overwriting local data
        self.onlinePath = dictionary[@"onlinePath"];
        // TODO: photoByUser - but I don't need to create these objects every time.
        // TODO: photoSpot
        
        [self updateCoreData];
    }
}

-(NSDictionary*)toDictionary {
    NSMutableDictionary* jsonable = [NSMutableDictionary dictionary];
    jsonable[@"creationTimestamp"] = self.creationTimestamp;
    jsonable[@"latitude"] = self.latitude;
    jsonable[@"longitude"] = self.longitude;
    jsonable[@"localPath"] = self.localPath;
    jsonable[@"onlinePath"] = self.onlinePath;
    
    jsonable[@"photoByUser"] = self.photoByUser.databaseId; // only one
    
    if (self.photoSpot.databaseId) {
        // in case the photo gets saved to the server before the spot does
        jsonable[@"photoSpot"] = self.photoSpot.databaseId; // only one
    }
    
    return jsonable;
}

-(UIImage*)getImage {
    UIImage *image;
    NSLog(@"checking for local image");
    // TODO: what to do when Photo doesn't have databaseId when image is requested?
    if (self.databaseId && ![self.databaseId isEqualToString:@"0"]) {
        // check if an image has been saved to the local cache
        NSString *cachesFolder = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];

        NSString *localPath = [[cachesFolder stringByAppendingPathComponent:self.databaseId] stringByAppendingString:@".jpg"];
        // set image to return variable
        image = [UIImage imageWithContentsOfFile:localPath];
        
        // if image is still nil, download the image from online
        if (!image) {
            NSString *onlinePath = [[kAWSBase stringByAppendingString:self.databaseId] stringByAppendingString:@".jpg"];
            NSLog(@"checking for online image: %@",onlinePath);
            NSData *recievedData = [NSData dataWithContentsOfURL:[NSURL URLWithString:onlinePath]];
            // set image to return variable
            image =[UIImage imageWithData:recievedData];
            if (image) {
                NSLog(@"saving locally");
                // for quicker retrieval next time
                [self saveImageToLocalCache:image];
            }
        }
    }

    return image;
}

-(void)saveImageToLocalCache:(UIImage*)image {
    // TODO: for this to work the local path should always be the same for all users so it should be
    // generated by each user and not saved to server, should just be /DATABASE_ID
    // hard part is that ideally need to save picture locally before to the server, so when callback
    // returns the new database ID should I delete the temp location and resave?
    
    NSData *saveImage = UIImageJPEGRepresentation(image,1.0);
//    // if there's not already a path to save to
//    if (!self.localPath || [self.onlinePath isEqualToString:@"NA"]) {
//        NSString *cachesFolder = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
//        // TODO: want this to be Photo's databaseId, temp using random number
//        NSString *randomFileName = [NSString stringWithFormat:@"photo%i", arc4random_uniform(9999)];
//        NSString *file = [cachesFolder stringByAppendingPathComponent:randomFileName];
//        
//        // save the new localPath
//        self.localPath = file;
//        [self updateCoreData];
//        ServerHandler *serverHandler = [ServerHandler sharedServerHandler];
//        [serverHandler pushPhotoToServer:self];
//    }

    NSString *cachesFolder = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
    NSString *localPath = [[cachesFolder stringByAppendingPathComponent:self.databaseId] stringByAppendingString:@".jpg"];
    [saveImage writeToFile:localPath options:NSDataWritingAtomic error:nil];
}

@end
